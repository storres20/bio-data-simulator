<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>ESP8266 Simulator - MHUTEMP</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: sans-serif;
            background: #f4f4f4;
            padding: 2rem;
            display: flex;
            justify-content: center;
        }

        .container {
            width: 100%;
            max-width: 640px;
        }

        h1, h2 {
            text-align: center;
            color: #333;
        }

        .stats {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .stats h3 {
            margin: 0;
            font-size: 1.1rem;
        }

        .stats .count {
            font-size: 2rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }

        .stats .detail {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        form, .device {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        label {
            font-weight: bold;
            margin-top: 0.5rem;
            display: block;
        }

        input[type="number"],
        input[type="text"],
        select {
            width: 100%;
            padding: 0.5rem;
            margin-top: 0.25rem;
            margin-bottom: 0.75rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        input[type="checkbox"] {
            margin-top: 0.5rem;
        }

        button {
            padding: 0.5rem 1.5rem;
            margin-top: 1rem;
            border: none;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        .device {
            border-left: 6px solid #4CAF50;
        }

        .actions {
            margin-top: 0.5rem;
        }

        .actions form {
            display: inline;
            margin-right: 0.5rem;
        }

        .door-status {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-weight: bold;
            font-size: 0.85rem;
        }

        .door-closed {
            background-color: #4CAF50;
            color: white;
        }

        .door-open {
            background-color: #f44336;
            color: white;
        }

        .door-unknown {
            background-color: #9e9e9e;
            color: white;
        }

        .button-group {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1.5rem;
        }

        .button-group button,
        .button-group form {
            flex: 1;
            min-width: 200px;
        }

        .button-group form button {
            width: 100%;
            margin: 0;
        }

        @media (max-width: 480px) {
            body {
                padding: 1rem;
            }

            form, .device {
                padding: 1rem;
            }

            button {
                width: 100%;
                margin-top: 0.5rem;
            }

            .button-group {
                flex-direction: column;
            }

            .button-group button,
            .button-group form {
                min-width: 100%;
            }

            .actions button {
                display: block;
                width: 100%;
                margin-bottom: 1rem;
            }

            .actions form {
                padding: 0rem;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <h1>üîß ESP8266 Device Simulator - MHUTEMP</h1>

    <div class="stats">
        <h3>System Status</h3>
        <div class="count"><%= devices.length %></div>
        <div class="detail">
            DB: <%= devices.length %> devices |
            Memory: <%= typeof activeCount !== 'undefined' ? activeCount : devices.length %> active
        </div>
    </div>

    <form action="/add" method="POST">
        <h2>‚ûï Create New Simulated Device</h2>

        <label>Username:</label>
        <input type="text" name="username" required>

        <div id="rangeFields">
            <label>Min Temp (Temp.OUT):</label>
            <input type="number" step="0.01" name="minDsT" required>

            <label>Max Temp (Temp.OUT):</label>
            <input type="number" step="0.01" name="maxDsT" required>

            <label>Min Temp (Temp.IN):</label>
            <input type="number" step="0.01" name="minT" required>

            <label>Max Temp (Temp.IN):</label>
            <input type="number" step="0.01" name="maxT" required>

            <label>Min Humidity (Hum.IN):</label>
            <input type="number" step="0.01" name="minH" required>

            <label>Max Humidity (Hum.IN):</label>
            <input type="number" step="0.01" name="maxH" required>
        </div>

        <label><input type="checkbox" name="fixed" id="fixedMode"> Fixed Mode</label>

        <div id="fixedFields" style="display:none;">
            <label>Fixed Temp (Temp.OUT):</label>
            <input type="number" step="0.01" name="dsTemperature" value="24.5">

            <label>Fixed Temp (Temp.IN):</label>
            <input type="number" step="0.01" name="temperature" value="25">

            <label>Fixed Humidity (Hum.IN):</label>
            <input type="number" step="0.01" name="humidity" value="50">
        </div>

        <label>Door Status:</label>
        <select name="doorStatus">
            <option value="closed" selected>üîí Closed</option>
            <option value="open">üîì Open</option>
            <option value="unknown">‚ùì Unknown</option>
        </select>

        <label>Simulation Interval (ms):</label>
        <input type="number" name="interval" value="2000" required>

        <button type="submit">Start Simulation</button>
    </form>

    <h2>üìã Simulated Devices</h2>

    <div class="button-group">
        <button onclick="logSimulators()" style="background-color: orange;">
            üìã Ver simuladores activos
        </button>

        <form action="/force-sync" method="POST">
            <button style="background-color: #2196F3; margin: 0;">
                üîÑ Sincronizar DB ‚Üî Memoria
            </button>
        </form>

        <form action="/delete-all" method="POST" onsubmit="return confirm('¬øEliminar TODOS los simuladores activos? Esta acci√≥n es irreversible.')">
            <button style="background-color: crimson; margin: 0;">
                üóëÔ∏è Eliminar TODOS
            </button>
        </form>
    </div>

    <% if (devices.length === 0) { %>
        <div style="text-align: center; padding: 2rem; background: white; border-radius: 10px;">
            <p style="color: #999; font-size: 1.2rem;">No devices currently running.</p>
        </div>
    <% } else { %>
        <% devices.forEach(device => { %>
            <div class="device">
                <strong><%= device.username %></strong><br>
                <span><%= device.running ? 'üü¢ Sending data' : '‚õî Stopped' %></span><br>

                <%
                    let doorClass = 'door-unknown';
                    let doorIcon = '‚ùì';
                    let doorText = 'Unknown';

                    if (device.doorStatus === 'closed') {
                        doorClass = 'door-closed';
                        doorIcon = 'üîí';
                        doorText = 'Closed';
                    } else if (device.doorStatus === 'open') {
                        doorClass = 'door-open';
                        doorIcon = 'üîì';
                        doorText = 'Open';
                    }
                %>

                <span class="door-status <%= doorClass %>"><%= doorIcon %> Door: <%= doorText %></span><br><br>

                üîÑ Interval: <%= device.interval %> ms<br>

                <% if (device.fixed) { %>
                    üå°Ô∏è Temp.OUT: <%= device.dsTemperature %> ¬∞C<br>
                    üå°Ô∏è Temp.IN: <%= device.temperature %> ¬∞C<br>
                    üíß Hum.IN: <%= device.humidity %> %<br>
                <% } else { %>
                    üå°Ô∏è Temp.OUT: <%= device.minDsT %>‚Äì<%= device.maxDsT %> ¬∞C<br>
                    üå°Ô∏è Temp.IN: <%= device.minT %>‚Äì<%= device.maxT %> ¬∞C<br>
                    üíß Hum.IN: <%= device.minH %>‚Äì<%= device.maxH %> %<br>
                <% } %>

                <div class="actions">
                    <form action="/delete/<%= device._id %>" method="POST" onsubmit="return confirm('Delete this device?')">
                        <button type="submit" style="background-color: #f44336;">Delete</button>
                    </form>
                </div>
            </div>
        <% }); %>
    <% } %>
</div>

<script>
    const fixedCheckbox = document.getElementById('fixedMode');
    const fixedFields = document.getElementById('fixedFields');
    const rangeFields = document.getElementById('rangeFields');
    const requiredRangeInputs = rangeFields.querySelectorAll('input');

    function toggleFields() {
        if (fixedCheckbox.checked) {
            fixedFields.style.display = 'block';
            rangeFields.style.display = 'none';
            requiredRangeInputs.forEach(input => input.removeAttribute('required'));
        } else {
            fixedFields.style.display = 'none';
            rangeFields.style.display = 'block';
            requiredRangeInputs.forEach(input => input.setAttribute('required', 'required'));
        }
    }

    fixedCheckbox.addEventListener('change', toggleFields);
    toggleFields();

    function logSimulators() {
        fetch('/log-active', {
            method: 'POST'
        }).then(() => {
            alert('‚úÖ Ver consola del servidor');
        }).catch(err => {
            alert('‚ùå Error al intentar consultar simuladores');
            console.error(err);
        });
    }
</script>
</body>
</html>
